{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Cassandra Engine - the Cassandra backend for Django # All tools you need to start your journey with Apache Cassandra and Django Framework! Already using DataStax Python Driver for Apache Cassandra ? That's great! Now you can easily integrate your existing or new Django project with it. Overview # django-cassandra-engine is the first Cassandra backend for Django Framework . It integrates with Django well and allows you to use Cqlengine directly in your project. All your cassandra models are automatically synced in the way you're used to. You can focus on writing a good code. Features # integration with latest python-driver from DataStax working flush , syncdb , migrate , sync_cassandra , inspectdb and dbshell commands support for creating/destroying test database accepts all cqlengine and cassandra.cluster.Cluster connection options automatic connection/disconnection handling works well along with relational databases storing sessions in Cassandra Requirements # Python>=3.8 Cassandra>=4.0 cassandra-driver Can't wait? Install me !","title":"Home"},{"location":"#django-cassandra-engine-the-cassandra-backend-for-django","text":"All tools you need to start your journey with Apache Cassandra and Django Framework! Already using DataStax Python Driver for Apache Cassandra ? That's great! Now you can easily integrate your existing or new Django project with it.","title":"Django Cassandra Engine - the Cassandra backend for Django"},{"location":"#overview","text":"django-cassandra-engine is the first Cassandra backend for Django Framework . It integrates with Django well and allows you to use Cqlengine directly in your project. All your cassandra models are automatically synced in the way you're used to. You can focus on writing a good code.","title":"Overview"},{"location":"#features","text":"integration with latest python-driver from DataStax working flush , syncdb , migrate , sync_cassandra , inspectdb and dbshell commands support for creating/destroying test database accepts all cqlengine and cassandra.cluster.Cluster connection options automatic connection/disconnection handling works well along with relational databases storing sessions in Cassandra","title":"Features"},{"location":"#requirements","text":"Python>=3.8 Cassandra>=4.0 cassandra-driver Can't wait? Install me !","title":"Requirements"},{"location":"changelog/","text":"Django Cassandra Engine - CHANGELOG # Version 1.9.0 (17.03.2024) # Support Django up to 4.2 Add support for Python 3.12 Version 1.8.0 (02.02.2023) # Drop support for Django 3.1 Support Django up to 4.1 Add support for Python 3.11 Version 1.7.0 (11.01.2022) # Fix(command/dbshell): Avoid raise TypeError when django-3.2 pass options['parameters'] (#154) - thanks @icycandle! Support Django 4.x Drop support for Python <3.7 replace cassandra-driver with scylla-driver to better support ScyllaDB (Scylla driver is fully compatible with Cassandra) Get rid of travis build system in favor of Github Actions (faster build times, better integration with Github) Reformat entire codebase with flake8, isort and black Add code style check to the build process Use Poetry to install the package and maintain dependencies Version 1.6.3 (26.07.2021) # Support cloud cred bundle (#142) Version 1.6.2 (19.05.2021) # Add support for Django 3.1 and 3.2 Fix #140: TypeError: sql_flush() got an unexpected keyword argument Version 1.6.1 (20.03.2020) # Updated requirements #136 (by @hsamfm) Version 1.6.0 (09.03.2020) # Support Django 3.x #135 Fix tests Update cassandra-driver to 3.22.0 Version 1.5.5 (30.01.2019) # Create the test keyspace not in the runtime keyspace (by @andydawkins) Version 1.5.4 (01.10.2018) # Upgrade Django and cassandra-driver deps Version 1.5.3 (26.07.2018) # Turn schema_metadata_enabled on while syncing database Make get_cql_models connection aware Version 1.5.0 (14.06.2018) # Support multiple cassandra databases Add docker-compose setup for better testing Version 1.4.0 (15.02.2018) # Support Django 2.0.x Update cassandra-driver to 3.13.0 Version 1.3.0 (16.11.2017) # Allow \"schema_metadata_enabled\" set to False in the connection options #105 (by awesome @bowensong) Update cassandra-driver to 3.12.0 Version 1.2.2 (29.08.2017) # Fix CassandraDatabaseSchemaEditor.create_model (#100) Version 1.2.1 (11.08.2017) # Add dse-driver support #98 (by @mbeacom) Version 1.2.0 (01.08.2017) # Update cassandra-driver to 3.11.0 Fix #93: Each query seems to execute a count() Fix #91: Set CQLENG_ALLOW_SCHEMA_MANAGEMENT variable if was not present Version 1.1.1 (26.04.2017) # Fix #90: Breaks BooleanField with provided default value: can't save False via admin UI project-wide if using django-cassandra-engine in same project Version 1.1.0 (09.04.2017) # Fix #89: Support Django 1.11 + update cassandra-driver to 3.8.1 Version 1.0.2 (04.11.2016) # Connect to Cassandra before importing models Version 1.0.1 (31.10.2016) # Fix #82: Support cassandra-driver==3.7.1 Version 1.0 (25.10.2016) # Fix #66: _meta API support (by awesome @richardasaurus) Version 0.11.1 (01.09.2016) # Fix for #70 \"AttributeError: operators (by @bezineb5) Fix #72: Django 1.10 makemigrations issue Fix #74: supress emit_post_migrate_signal in sync_cassandra (by @jamey) Version 0.11.0 (05.08.2016) # Fix #69: Replace NoArgsCommand with BaseCommand to accommodate 1.10 upgrade (by @BenBrostoff) Update cassandra-driver to 3.6.0 Version 0.10.1 (22.07.2016) # Update cassandra-driver to 3.5.0 Version 0.10.0 (10.06.2016) # Update to emit post migrate signal (by @kamal-una) Update cassandra-driver to 3.4.1 Version 0.9.0 (11.05.2016) # Update cassandra-driver to 3.3.0 Update FAQ about uwsgi support Version 0.8.1 (20.04.2016) # Update cassandra-driver to 3.2.2 (check PYTHON-547). Version 0.8.0 (18.04.2016) # Update cassandra-driver to 3.2.1 Version 0.7.4 (23.03.2016) # Fix error thrown in runserver command Version 0.7.3 (21.03.2016) # Minor fix in sessions backend (remove pk from Session.expire_date ) Version 0.7.2 (15.03.2016) # Locked cassandra-driver version in setup.py (fixup) Version 0.7.1 (15.03.2016) # Update cassandra-driver to 3.1.1 due to PYTHON-522 Fix #55: pypi page looks strange Version 0.7.0 (11.03.2016) # Update cassandra-driver to 3.1.0 Fix syncdb command in Django>=1.9 Fix not working django.contrib.admin app when dce is used Add tox for running tests easily Introduce sessions app Update docs Version 0.6.6 (04.03.2016) # Update requirements.txt to support Django<1.10 Version 0.6.5 (22.02.2016) # Fix support for latest django-nose==1.4.3 Version 0.6.4 (05.02.2016) # Get rid of race condition in CassandraConnection.setup Remove not needed reconnecting on @postfork Version 0.6.3 (08.01.2016) # Major improvement in tests execution time Version 0.6.2 (08.12.2015) # Support Django==1.9 Version 0.6.1 (07.12.2015) # Fix CassandraConnection.setup method (thanks @mateuszm!) Version 0.6.0 (25.11.2015) # Update cassandra-driver to 0.3.0 Version 0.5.2 (04.10.2015) # Update cassandra-driver to 2.7.2 Version 0.5.1 (14.09.2015) # fix #44: Fix migrate command when working in a multi db environment (by @paksu) Version 0.5.0 (26.08.2015) # Fix CassandraDatabaseFeatures.supports_transactions (thanks @slurms) Update cassandra-driver to 2.7.1 Version 0.4.0 (21.07.2015) # Update cassandra-driver to 2.6.0 Version 0.3.4 (01.07.2015) # Set Session attributes in class instead of local instance (by @mateuszm) Version 0.3.3 (25.05.2015) # RemovedInDjango19Warnings when using Django >= 1.7 (by @paksu) set session.default_consistency_level Version 0.3.2 (04.05.2015) # upgrade cassandra-driver to 2.5.1 Version 0.3.1 (10.04.2015) # fix #30: Add support for Django>=1.8 remove djangotoolbox dependency fix #21: Python 3 compatibility Version 0.3.0 (03.04.2015) # fix #29: Update to use integrated cqlengine via cassandra-driver>=2.5.0 (by @mbeacom and @r4fek) Version 0.2.3 (25.03.2015) # fix #15: test database not used by code under test (by @lsmithso) fix #25: working fixtures in django_cassandra_engine.test.TestCase (by @slurms) Version 0.2.2 (19.01.2015) # add support for Django==1.5 add support for Django>=1.7.2 add get_engine_from_db_alias util function Version 0.2.1 (16.01.2015) # update cqlengine to 0.21.0 move syncing code to sync_cassandra command Refactor test runner separate settings modules to make testing easier new test application: multiapp new get_cassandra_connections function to return list of all cassandra conncetions defined in DATABASES setting get_cassandra_connection now accepts alias and name parameters get_cql_models now returns models for given keyspace Version 0.1.8 (13.12.2014) # add working Cursor implementation ability to perform raw CQL queries improve support for Django 1.7 present get_cassandra_connection helper add more tests Version 0.1.7 (24.11.2014) # revert broken consistency fix (thanks to @danandersonasc) Version 0.1.6 (24.11.2014) # fix passing proper consistency option to cqlengine.setup add more tests bump cqlengine to 0.20.0 Version 0.1.5 (17.11.2014) # ability to set cassandra.cluster.Session options like default_timeout (thanks @danpilch) Version 0.1.4 (01.11.2014) # add support for authorization (thanks to @drivard) Version 0.1.3 (20.10.2014) # more tests for Connection class presesnt sync_cassandra management command Version 0.1.2 (20.10.2014) # add support for uWSGI Version 0.1.1 (17.10.2014) # fix exceptions in Django 1.7 override migrate and runserver commands Version 0.1.0 (08.10.2014) # Change status to Production/Stable Bump cqlengine to v.0.19 Update docs Version 0.0.7 (02.10.2014) # Support for more connection options (thanks to @mwiewiorski) Version 0.0.6 (03.09.2014) # Add support for Django 1.7 Version 0.0.5 (29.08.2014) # Improved models discovery Call the standard syncdb if the engine is not django_cassandra_engine (thanks to @ratm) Travis integration Version 0.0.4 (22.08.2014) # Feature: add support for flush management command Bugfix: lock dependencies in setup.py add more tests Version 0.0.3 (21.08.2014) # Bugfix: Fix some issue in flush command (add dummy support for Django 1.6.6) Version 0.0.2 (04.08.2014) # Bugfix: Do not reconnect on every request Version 0.0.1 (31.07.2014) # Feature: allow to define cassandra backend in settings.py Feature: connect to the Cassandra database automatically on app startup Feature: syncdb management command Feature: support for django test framework Feature: Support for Cqlengine Object Mapper","title":"Changelog"},{"location":"changelog/#django-cassandra-engine-changelog","text":"","title":"Django Cassandra Engine - CHANGELOG"},{"location":"changelog/#version-190-17032024","text":"Support Django up to 4.2 Add support for Python 3.12","title":"Version 1.9.0 (17.03.2024)"},{"location":"changelog/#version-180-02022023","text":"Drop support for Django 3.1 Support Django up to 4.1 Add support for Python 3.11","title":"Version 1.8.0 (02.02.2023)"},{"location":"changelog/#version-170-11012022","text":"Fix(command/dbshell): Avoid raise TypeError when django-3.2 pass options['parameters'] (#154) - thanks @icycandle! Support Django 4.x Drop support for Python <3.7 replace cassandra-driver with scylla-driver to better support ScyllaDB (Scylla driver is fully compatible with Cassandra) Get rid of travis build system in favor of Github Actions (faster build times, better integration with Github) Reformat entire codebase with flake8, isort and black Add code style check to the build process Use Poetry to install the package and maintain dependencies","title":"Version 1.7.0 (11.01.2022)"},{"location":"changelog/#version-163-26072021","text":"Support cloud cred bundle (#142)","title":"Version 1.6.3 (26.07.2021)"},{"location":"changelog/#version-162-19052021","text":"Add support for Django 3.1 and 3.2 Fix #140: TypeError: sql_flush() got an unexpected keyword argument","title":"Version 1.6.2 (19.05.2021)"},{"location":"changelog/#version-161-20032020","text":"Updated requirements #136 (by @hsamfm)","title":"Version 1.6.1 (20.03.2020)"},{"location":"changelog/#version-160-09032020","text":"Support Django 3.x #135 Fix tests Update cassandra-driver to 3.22.0","title":"Version 1.6.0 (09.03.2020)"},{"location":"changelog/#version-155-30012019","text":"Create the test keyspace not in the runtime keyspace (by @andydawkins)","title":"Version 1.5.5 (30.01.2019)"},{"location":"changelog/#version-154-01102018","text":"Upgrade Django and cassandra-driver deps","title":"Version 1.5.4 (01.10.2018)"},{"location":"changelog/#version-153-26072018","text":"Turn schema_metadata_enabled on while syncing database Make get_cql_models connection aware","title":"Version 1.5.3 (26.07.2018)"},{"location":"changelog/#version-150-14062018","text":"Support multiple cassandra databases Add docker-compose setup for better testing","title":"Version 1.5.0 (14.06.2018)"},{"location":"changelog/#version-140-15022018","text":"Support Django 2.0.x Update cassandra-driver to 3.13.0","title":"Version 1.4.0 (15.02.2018)"},{"location":"changelog/#version-130-16112017","text":"Allow \"schema_metadata_enabled\" set to False in the connection options #105 (by awesome @bowensong) Update cassandra-driver to 3.12.0","title":"Version 1.3.0 (16.11.2017)"},{"location":"changelog/#version-122-29082017","text":"Fix CassandraDatabaseSchemaEditor.create_model (#100)","title":"Version 1.2.2 (29.08.2017)"},{"location":"changelog/#version-121-11082017","text":"Add dse-driver support #98 (by @mbeacom)","title":"Version 1.2.1 (11.08.2017)"},{"location":"changelog/#version-120-01082017","text":"Update cassandra-driver to 3.11.0 Fix #93: Each query seems to execute a count() Fix #91: Set CQLENG_ALLOW_SCHEMA_MANAGEMENT variable if was not present","title":"Version 1.2.0 (01.08.2017)"},{"location":"changelog/#version-111-26042017","text":"Fix #90: Breaks BooleanField with provided default value: can't save False via admin UI project-wide if using django-cassandra-engine in same project","title":"Version 1.1.1 (26.04.2017)"},{"location":"changelog/#version-110-09042017","text":"Fix #89: Support Django 1.11 + update cassandra-driver to 3.8.1","title":"Version 1.1.0 (09.04.2017)"},{"location":"changelog/#version-102-04112016","text":"Connect to Cassandra before importing models","title":"Version 1.0.2 (04.11.2016)"},{"location":"changelog/#version-101-31102016","text":"Fix #82: Support cassandra-driver==3.7.1","title":"Version 1.0.1 (31.10.2016)"},{"location":"changelog/#version-10-25102016","text":"Fix #66: _meta API support (by awesome @richardasaurus)","title":"Version 1.0 (25.10.2016)"},{"location":"changelog/#version-0111-01092016","text":"Fix for #70 \"AttributeError: operators (by @bezineb5) Fix #72: Django 1.10 makemigrations issue Fix #74: supress emit_post_migrate_signal in sync_cassandra (by @jamey)","title":"Version 0.11.1 (01.09.2016)"},{"location":"changelog/#version-0110-05082016","text":"Fix #69: Replace NoArgsCommand with BaseCommand to accommodate 1.10 upgrade (by @BenBrostoff) Update cassandra-driver to 3.6.0","title":"Version 0.11.0 (05.08.2016)"},{"location":"changelog/#version-0101-22072016","text":"Update cassandra-driver to 3.5.0","title":"Version 0.10.1 (22.07.2016)"},{"location":"changelog/#version-0100-10062016","text":"Update to emit post migrate signal (by @kamal-una) Update cassandra-driver to 3.4.1","title":"Version 0.10.0 (10.06.2016)"},{"location":"changelog/#version-090-11052016","text":"Update cassandra-driver to 3.3.0 Update FAQ about uwsgi support","title":"Version 0.9.0 (11.05.2016)"},{"location":"changelog/#version-081-20042016","text":"Update cassandra-driver to 3.2.2 (check PYTHON-547).","title":"Version 0.8.1 (20.04.2016)"},{"location":"changelog/#version-080-18042016","text":"Update cassandra-driver to 3.2.1","title":"Version 0.8.0 (18.04.2016)"},{"location":"changelog/#version-074-23032016","text":"Fix error thrown in runserver command","title":"Version 0.7.4 (23.03.2016)"},{"location":"changelog/#version-073-21032016","text":"Minor fix in sessions backend (remove pk from Session.expire_date )","title":"Version 0.7.3 (21.03.2016)"},{"location":"changelog/#version-072-15032016","text":"Locked cassandra-driver version in setup.py (fixup)","title":"Version 0.7.2 (15.03.2016)"},{"location":"changelog/#version-071-15032016","text":"Update cassandra-driver to 3.1.1 due to PYTHON-522 Fix #55: pypi page looks strange","title":"Version 0.7.1 (15.03.2016)"},{"location":"changelog/#version-070-11032016","text":"Update cassandra-driver to 3.1.0 Fix syncdb command in Django>=1.9 Fix not working django.contrib.admin app when dce is used Add tox for running tests easily Introduce sessions app Update docs","title":"Version 0.7.0 (11.03.2016)"},{"location":"changelog/#version-066-04032016","text":"Update requirements.txt to support Django<1.10","title":"Version 0.6.6 (04.03.2016)"},{"location":"changelog/#version-065-22022016","text":"Fix support for latest django-nose==1.4.3","title":"Version 0.6.5 (22.02.2016)"},{"location":"changelog/#version-064-05022016","text":"Get rid of race condition in CassandraConnection.setup Remove not needed reconnecting on @postfork","title":"Version 0.6.4 (05.02.2016)"},{"location":"changelog/#version-063-08012016","text":"Major improvement in tests execution time","title":"Version 0.6.3 (08.01.2016)"},{"location":"changelog/#version-062-08122015","text":"Support Django==1.9","title":"Version 0.6.2 (08.12.2015)"},{"location":"changelog/#version-061-07122015","text":"Fix CassandraConnection.setup method (thanks @mateuszm!)","title":"Version 0.6.1 (07.12.2015)"},{"location":"changelog/#version-060-25112015","text":"Update cassandra-driver to 0.3.0","title":"Version 0.6.0 (25.11.2015)"},{"location":"changelog/#version-052-04102015","text":"Update cassandra-driver to 2.7.2","title":"Version 0.5.2 (04.10.2015)"},{"location":"changelog/#version-051-14092015","text":"fix #44: Fix migrate command when working in a multi db environment (by @paksu)","title":"Version 0.5.1 (14.09.2015)"},{"location":"changelog/#version-050-26082015","text":"Fix CassandraDatabaseFeatures.supports_transactions (thanks @slurms) Update cassandra-driver to 2.7.1","title":"Version 0.5.0 (26.08.2015)"},{"location":"changelog/#version-040-21072015","text":"Update cassandra-driver to 2.6.0","title":"Version 0.4.0 (21.07.2015)"},{"location":"changelog/#version-034-01072015","text":"Set Session attributes in class instead of local instance (by @mateuszm)","title":"Version 0.3.4 (01.07.2015)"},{"location":"changelog/#version-033-25052015","text":"RemovedInDjango19Warnings when using Django >= 1.7 (by @paksu) set session.default_consistency_level","title":"Version 0.3.3 (25.05.2015)"},{"location":"changelog/#version-032-04052015","text":"upgrade cassandra-driver to 2.5.1","title":"Version 0.3.2 (04.05.2015)"},{"location":"changelog/#version-031-10042015","text":"fix #30: Add support for Django>=1.8 remove djangotoolbox dependency fix #21: Python 3 compatibility","title":"Version 0.3.1 (10.04.2015)"},{"location":"changelog/#version-030-03042015","text":"fix #29: Update to use integrated cqlengine via cassandra-driver>=2.5.0 (by @mbeacom and @r4fek)","title":"Version 0.3.0 (03.04.2015)"},{"location":"changelog/#version-023-25032015","text":"fix #15: test database not used by code under test (by @lsmithso) fix #25: working fixtures in django_cassandra_engine.test.TestCase (by @slurms)","title":"Version 0.2.3 (25.03.2015)"},{"location":"changelog/#version-022-19012015","text":"add support for Django==1.5 add support for Django>=1.7.2 add get_engine_from_db_alias util function","title":"Version 0.2.2 (19.01.2015)"},{"location":"changelog/#version-021-16012015","text":"update cqlengine to 0.21.0 move syncing code to sync_cassandra command Refactor test runner separate settings modules to make testing easier new test application: multiapp new get_cassandra_connections function to return list of all cassandra conncetions defined in DATABASES setting get_cassandra_connection now accepts alias and name parameters get_cql_models now returns models for given keyspace","title":"Version 0.2.1 (16.01.2015)"},{"location":"changelog/#version-018-13122014","text":"add working Cursor implementation ability to perform raw CQL queries improve support for Django 1.7 present get_cassandra_connection helper add more tests","title":"Version 0.1.8 (13.12.2014)"},{"location":"changelog/#version-017-24112014","text":"revert broken consistency fix (thanks to @danandersonasc)","title":"Version 0.1.7 (24.11.2014)"},{"location":"changelog/#version-016-24112014","text":"fix passing proper consistency option to cqlengine.setup add more tests bump cqlengine to 0.20.0","title":"Version 0.1.6 (24.11.2014)"},{"location":"changelog/#version-015-17112014","text":"ability to set cassandra.cluster.Session options like default_timeout (thanks @danpilch)","title":"Version 0.1.5 (17.11.2014)"},{"location":"changelog/#version-014-01112014","text":"add support for authorization (thanks to @drivard)","title":"Version 0.1.4 (01.11.2014)"},{"location":"changelog/#version-013-20102014","text":"more tests for Connection class presesnt sync_cassandra management command","title":"Version 0.1.3 (20.10.2014)"},{"location":"changelog/#version-012-20102014","text":"add support for uWSGI","title":"Version 0.1.2 (20.10.2014)"},{"location":"changelog/#version-011-17102014","text":"fix exceptions in Django 1.7 override migrate and runserver commands","title":"Version 0.1.1 (17.10.2014)"},{"location":"changelog/#version-010-08102014","text":"Change status to Production/Stable Bump cqlengine to v.0.19 Update docs","title":"Version 0.1.0 (08.10.2014)"},{"location":"changelog/#version-007-02102014","text":"Support for more connection options (thanks to @mwiewiorski)","title":"Version 0.0.7 (02.10.2014)"},{"location":"changelog/#version-006-03092014","text":"Add support for Django 1.7","title":"Version 0.0.6 (03.09.2014)"},{"location":"changelog/#version-005-29082014","text":"Improved models discovery Call the standard syncdb if the engine is not django_cassandra_engine (thanks to @ratm) Travis integration","title":"Version 0.0.5 (29.08.2014)"},{"location":"changelog/#version-004-22082014","text":"Feature: add support for flush management command Bugfix: lock dependencies in setup.py add more tests","title":"Version 0.0.4 (22.08.2014)"},{"location":"changelog/#version-003-21082014","text":"Bugfix: Fix some issue in flush command (add dummy support for Django 1.6.6)","title":"Version 0.0.3 (21.08.2014)"},{"location":"changelog/#version-002-04082014","text":"Bugfix: Do not reconnect on every request","title":"Version 0.0.2 (04.08.2014)"},{"location":"changelog/#version-001-31072014","text":"Feature: allow to define cassandra backend in settings.py Feature: connect to the Cassandra database automatically on app startup Feature: syncdb management command Feature: support for django test framework Feature: Support for Cqlengine Object Mapper","title":"Version 0.0.1 (31.07.2014)"},{"location":"faq/","text":"Django Cassandra Engine - Troubleshooting # In case of any question please don't hesitate to ask! Q: syncdb only creates a keyspace.. # A: Please make sure that django_cassandra_engine is the first application in INSTALLED_APPS list. It's also important to include your app to that list too. Q: Is it possible to use it with Celery? # A: Short answer: YES. If you use django_cassandra_engine as your default backend: # project/tasks.py from celery.signals import worker_init from django.db import connection @worker_process_init . connect def connect_db ( ** kwargs ): connection . reconnect () Or if 'cassandra' is your secondary DB alias: from django.db import connections connection = connections [ 'cassandra' ] @worker_process_init . connect def connect_db ( ** kwargs ): connection . reconnect () Q: is uWSGI supported? # A: Yes, uWSGI is supported by default. It works best with retry_connect set to True (in django settings). It also requires that lazy-apps = True is set in uwsgi.ini .","title":"FAQ"},{"location":"faq/#django-cassandra-engine-troubleshooting","text":"In case of any question please don't hesitate to ask!","title":"Django Cassandra Engine - Troubleshooting"},{"location":"faq/#q-syncdb-only-creates-a-keyspace","text":"A: Please make sure that django_cassandra_engine is the first application in INSTALLED_APPS list. It's also important to include your app to that list too.","title":"Q: syncdb only creates a keyspace.."},{"location":"faq/#q-is-it-possible-to-use-it-with-celery","text":"A: Short answer: YES. If you use django_cassandra_engine as your default backend: # project/tasks.py from celery.signals import worker_init from django.db import connection @worker_process_init . connect def connect_db ( ** kwargs ): connection . reconnect () Or if 'cassandra' is your secondary DB alias: from django.db import connections connection = connections [ 'cassandra' ] @worker_process_init . connect def connect_db ( ** kwargs ): connection . reconnect ()","title":"Q: Is it possible to use it with Celery?"},{"location":"faq/#q-is-uwsgi-supported","text":"A: Yes, uWSGI is supported by default. It works best with retry_connect set to True (in django settings). It also requires that lazy-apps = True is set in uwsgi.ini .","title":"Q: is uWSGI supported?"},{"location":"license/","text":"2-clause BSD License # Copyright (c) 2014-2024, Rafa\u0142 Furma\u0144ski r.furmanski@gmail.com All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"license/#2-clause-bsd-license","text":"Copyright (c) 2014-2024, Rafa\u0142 Furma\u0144ski r.furmanski@gmail.com All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"2-clause BSD License"},{"location":"guide/advanced_usage/","text":"Django Cassandra Engine - Advanced Usage # Cassandra as secondary database # Sometimes you want to use cassandra database along with your relational database. This is also possible! Just define your DATABASES like below: from cassandra import ConsistencyLevel DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : os . path . join ( BASE_DIR , 'db.sqlite3' ), }, 'cassandra' : { 'ENGINE' : 'django_cassandra_engine' , 'NAME' : 'db' , 'USER' : 'user' , 'PASSWORD' : 'pass' , 'TEST_NAME' : 'test_db' , 'HOST' : '127.0.0.1' , 'OPTIONS' : { 'replication' : { 'strategy_class' : 'SimpleStrategy' , 'replication_factor' : 1 }, 'connection' : { 'consistency' : ConsistencyLevel . LOCAL_ONE , 'retry_connect' : True # + All connection options for cassandra.cluster.Cluster() }, 'session' : { 'default_timeout' : 10 , 'default_fetch_size' : 10000 # + All options for cassandra.cluster.Session() } } } } Then run ./manage.py syncdb for your regular database and ./manage.py sync_cassandra or ./manage.py syncdb --database cassandra for Cassandra DB. All cassandra.cluster.Cluster and cassandra.cluster.Session options are well described here . Using internal authorization # If you want to use internal authorization just provide USER and PASSWORD in cassandra's database alias. ... 'cassandra' { 'ENGINE' : 'django_cassandra_engine' , 'NAME' : 'db' , 'USER' : 'user' , 'PASSWORD' : 'pass' } You can also pass custom auth_provider to connection dict: ... 'connection' : { 'consistency' : ConsistencyLevel . LOCAL_ONE , 'retry_connect' : True , 'port' : 9042 , 'auth_provider' : PlainTextAuthProvider ( username = 'user' , password = 'password' ) # + All connection options for cassandra.cluster.Cluster() } Performing raw database queries # You might need to perform queries that don't map cleanly to models, or directly execute UPDATE , INSERT , or DELETE queries. In these cases, you can always access the database directly, routing around the model layer entirely: from django.db import connection cursor = connection . cursor () result = cursor . execute ( \"SELECT COUNT(*) FROM users\" ) print result [ 0 ][ 'count' ] That was easy! Show me some useful management commands now.","title":"Advanced Usage"},{"location":"guide/advanced_usage/#django-cassandra-engine-advanced-usage","text":"","title":"Django Cassandra Engine - Advanced Usage"},{"location":"guide/advanced_usage/#cassandra-as-secondary-database","text":"Sometimes you want to use cassandra database along with your relational database. This is also possible! Just define your DATABASES like below: from cassandra import ConsistencyLevel DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.sqlite3' , 'NAME' : os . path . join ( BASE_DIR , 'db.sqlite3' ), }, 'cassandra' : { 'ENGINE' : 'django_cassandra_engine' , 'NAME' : 'db' , 'USER' : 'user' , 'PASSWORD' : 'pass' , 'TEST_NAME' : 'test_db' , 'HOST' : '127.0.0.1' , 'OPTIONS' : { 'replication' : { 'strategy_class' : 'SimpleStrategy' , 'replication_factor' : 1 }, 'connection' : { 'consistency' : ConsistencyLevel . LOCAL_ONE , 'retry_connect' : True # + All connection options for cassandra.cluster.Cluster() }, 'session' : { 'default_timeout' : 10 , 'default_fetch_size' : 10000 # + All options for cassandra.cluster.Session() } } } } Then run ./manage.py syncdb for your regular database and ./manage.py sync_cassandra or ./manage.py syncdb --database cassandra for Cassandra DB. All cassandra.cluster.Cluster and cassandra.cluster.Session options are well described here .","title":"Cassandra as secondary database"},{"location":"guide/advanced_usage/#using-internal-authorization","text":"If you want to use internal authorization just provide USER and PASSWORD in cassandra's database alias. ... 'cassandra' { 'ENGINE' : 'django_cassandra_engine' , 'NAME' : 'db' , 'USER' : 'user' , 'PASSWORD' : 'pass' } You can also pass custom auth_provider to connection dict: ... 'connection' : { 'consistency' : ConsistencyLevel . LOCAL_ONE , 'retry_connect' : True , 'port' : 9042 , 'auth_provider' : PlainTextAuthProvider ( username = 'user' , password = 'password' ) # + All connection options for cassandra.cluster.Cluster() }","title":"Using internal authorization"},{"location":"guide/advanced_usage/#performing-raw-database-queries","text":"You might need to perform queries that don't map cleanly to models, or directly execute UPDATE , INSERT , or DELETE queries. In these cases, you can always access the database directly, routing around the model layer entirely: from django.db import connection cursor = connection . cursor () result = cursor . execute ( \"SELECT COUNT(*) FROM users\" ) print result [ 0 ][ 'count' ] That was easy! Show me some useful management commands now.","title":"Performing raw database queries"},{"location":"guide/contributing/","text":"Django Cassandra Engine - Contributing # You are highly encouraged to participate in the development, simply use GitHub's fork/pull request system. Working with source code and running tests # $ git clone https://github.com/r4fek/django-cassandra-engine.git $ pip install tox $ cd django_cassandra_engine $ tox","title":"Contributing"},{"location":"guide/contributing/#django-cassandra-engine-contributing","text":"You are highly encouraged to participate in the development, simply use GitHub's fork/pull request system.","title":"Django Cassandra Engine - Contributing"},{"location":"guide/contributing/#working-with-source-code-and-running-tests","text":"$ git clone https://github.com/r4fek/django-cassandra-engine.git $ pip install tox $ cd django_cassandra_engine $ tox","title":"Working with source code and running tests"},{"location":"guide/getting_started/","text":"Django Cassandra Engine - Getting Started # Add django-cassandra-engine to INSTALLED_APPS in your settings.py file: INSTALLED_APPS = [ 'django_cassandra_engine' ] + INSTALLED_APPS Important note This app should be the first app on INSTALLED_APPS list. This rule applies only to Django >= 1.7. Change DATABASES setting: DATABASES = { 'default' : { 'ENGINE' : 'django_cassandra_engine' , 'NAME' : 'db' , 'TEST_NAME' : 'test_db' , 'HOST' : 'db1.example.com,db2.example.com' , 'OPTIONS' : { 'replication' : { 'strategy_class' : 'SimpleStrategy' , 'replication_factor' : 1 } } } } Define some model(s) in your Django app: # myapp/models.py import uuid from cassandra.cqlengine import columns from django_cassandra_engine.models import DjangoCassandraModel class ExampleModel ( DjangoCassandraModel ): example_id = columns . UUID ( primary_key = True , default = uuid . uuid4 ) example_type = columns . Integer ( index = True ) created_at = columns . DateTime () description = columns . Text ( required = False ) Run ./manage.py sync_cassandra in order to sync your models with Cassandra. Done! That was simple, right? I want more! .","title":"Getting Started"},{"location":"guide/getting_started/#django-cassandra-engine-getting-started","text":"Add django-cassandra-engine to INSTALLED_APPS in your settings.py file: INSTALLED_APPS = [ 'django_cassandra_engine' ] + INSTALLED_APPS Important note This app should be the first app on INSTALLED_APPS list. This rule applies only to Django >= 1.7. Change DATABASES setting: DATABASES = { 'default' : { 'ENGINE' : 'django_cassandra_engine' , 'NAME' : 'db' , 'TEST_NAME' : 'test_db' , 'HOST' : 'db1.example.com,db2.example.com' , 'OPTIONS' : { 'replication' : { 'strategy_class' : 'SimpleStrategy' , 'replication_factor' : 1 } } } } Define some model(s) in your Django app: # myapp/models.py import uuid from cassandra.cqlengine import columns from django_cassandra_engine.models import DjangoCassandraModel class ExampleModel ( DjangoCassandraModel ): example_id = columns . UUID ( primary_key = True , default = uuid . uuid4 ) example_type = columns . Integer ( index = True ) created_at = columns . DateTime () description = columns . Text ( required = False ) Run ./manage.py sync_cassandra in order to sync your models with Cassandra. Done! That was simple, right? I want more! .","title":"Django Cassandra Engine - Getting Started"},{"location":"guide/installation/","text":"Django Cassandra Engine - Installation # Installation of django-cassandra-engine is very simple! Installation procedure # You can install it easily from PyPi by single command: $ pip install django-cassandra-engine or clone source code from Github and run: $ python setup.py install Download links # Github PyPi Great! You have package installed, so let's use it .","title":"Installation"},{"location":"guide/installation/#django-cassandra-engine-installation","text":"Installation of django-cassandra-engine is very simple!","title":"Django Cassandra Engine - Installation"},{"location":"guide/installation/#installation-procedure","text":"You can install it easily from PyPi by single command: $ pip install django-cassandra-engine or clone source code from Github and run: $ python setup.py install","title":"Installation procedure"},{"location":"guide/installation/#download-links","text":"Github PyPi Great! You have package installed, so let's use it .","title":"Download links"},{"location":"guide/management_commands/","text":"Django Cassandra Engine - Management Commands # These Django management commands will make your life a lot easier. sync_cassandra # Synchronizes your models with Cassandra. $ python manage.py sync_cassandra Syncing app.models.ExampleModel Syncing app.models.ExampleModel2 Syncing app.models.TestProjectModel migrate # Synchronizes your models with Cassandra. $ python manage.py migrate --database default Syncing app.models.ExampleModel Syncing app.models.ExampleModel2 Syncing app.models.TestProjectModel flush # Flushes your database. $ python manage.py flush dbshell # Quick access to dbshell via cqlsh . If you need to perform raw CQL query on your keyspace just run: $ python manage.py dbshell Connected to Test Cluster at 127 .0.0.1:9042. [ cqlsh 5 .0.1 | Cassandra 2 .1.4 | CQL spec 3 .2.0 | Native protocol v3 ] Use HELP for help. cqlsh:your_keyspace> inspectdb # Introspects Cassandra database. It shows only model names and db tables. $ python manage . py inspectdb class Session ( models . Model ): class Meta : managed = False db_table = 'session' class ExampleModel2 ( models . Model ): class Meta : managed = False db_table = 'example_model2' class ExampleModel ( models . Model ): class Meta : managed = False db_table = 'example_model' class TestProjectModel ( models . Model ): class Meta : managed = False db_table = 'test_project_model' Almost done! Show me how to test my app.","title":"Management Commands"},{"location":"guide/management_commands/#django-cassandra-engine-management-commands","text":"These Django management commands will make your life a lot easier.","title":"Django Cassandra Engine - Management Commands"},{"location":"guide/management_commands/#sync_cassandra","text":"Synchronizes your models with Cassandra. $ python manage.py sync_cassandra Syncing app.models.ExampleModel Syncing app.models.ExampleModel2 Syncing app.models.TestProjectModel","title":"sync_cassandra"},{"location":"guide/management_commands/#migrate","text":"Synchronizes your models with Cassandra. $ python manage.py migrate --database default Syncing app.models.ExampleModel Syncing app.models.ExampleModel2 Syncing app.models.TestProjectModel","title":"migrate"},{"location":"guide/management_commands/#flush","text":"Flushes your database. $ python manage.py flush","title":"flush"},{"location":"guide/management_commands/#dbshell","text":"Quick access to dbshell via cqlsh . If you need to perform raw CQL query on your keyspace just run: $ python manage.py dbshell Connected to Test Cluster at 127 .0.0.1:9042. [ cqlsh 5 .0.1 | Cassandra 2 .1.4 | CQL spec 3 .2.0 | Native protocol v3 ] Use HELP for help. cqlsh:your_keyspace>","title":"dbshell"},{"location":"guide/management_commands/#inspectdb","text":"Introspects Cassandra database. It shows only model names and db tables. $ python manage . py inspectdb class Session ( models . Model ): class Meta : managed = False db_table = 'session' class ExampleModel2 ( models . Model ): class Meta : managed = False db_table = 'example_model2' class ExampleModel ( models . Model ): class Meta : managed = False db_table = 'example_model' class TestProjectModel ( models . Model ): class Meta : managed = False db_table = 'test_project_model' Almost done! Show me how to test my app.","title":"inspectdb"},{"location":"guide/sessions/","text":"Django Cassandra Engine - Sessions # Two session backends backed up with Cassandra are available django_cassandra_engine.sessions.backends.db django_cassandra_engine.sessions.backends.cached_db All you need to do is to enable one of them in your settings.py file: INSTALLED_APPS += [ 'django_cassandra_engine.sessions' ] SESSION_ENGINE = 'django_cassandra_engine.sessions.backends.db' Then you need to sync session model with Cassandra: $ python manage.py sync_cassandra That's it.","title":"Sessions"},{"location":"guide/sessions/#django-cassandra-engine-sessions","text":"Two session backends backed up with Cassandra are available django_cassandra_engine.sessions.backends.db django_cassandra_engine.sessions.backends.cached_db All you need to do is to enable one of them in your settings.py file: INSTALLED_APPS += [ 'django_cassandra_engine.sessions' ] SESSION_ENGINE = 'django_cassandra_engine.sessions.backends.db' Then you need to sync session model with Cassandra: $ python manage.py sync_cassandra That's it.","title":"Django Cassandra Engine - Sessions"},{"location":"guide/tests/","text":"Django Cassandra Engine - Writing Tests # You can write tests the way you used to. Just subclass django.test.TestCase if django_cassandra_engine is your primary (default) database backend. If not, just use django_cassandra_engine.test.TestCase . I'm django-cassandra-engine expert now! I want to contribute .","title":"Writing Tests"},{"location":"guide/tests/#django-cassandra-engine-writing-tests","text":"You can write tests the way you used to. Just subclass django.test.TestCase if django_cassandra_engine is your primary (default) database backend. If not, just use django_cassandra_engine.test.TestCase . I'm django-cassandra-engine expert now! I want to contribute .","title":"Django Cassandra Engine - Writing Tests"}]}